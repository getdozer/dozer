syntax = "proto3";

package dozer.internal;

import "google/protobuf/empty.proto";

service InternalPipelineService {
  /// Get a running server's uuid. The id never changes. Different servers will have different ids.
  rpc GetId(google.protobuf.Empty) returns (GetIdResponse);

  rpc DescribeStorage(StorageRequest) returns (StorageResponse);
  rpc DescribeBuild(BuildRequest) returns (BuildResponse);
  rpc DescribeApplication(google.protobuf.Empty) returns (DescribeApplicationResponse);
  /// For every `LogRequest` sent, the server will reply one `LogResponse`.
  rpc GetLog(stream LogRequest) returns (stream LogResponse);
}

message GetIdResponse {
  string id = 1;
}

message StorageRequest {
  string endpoint = 1;
}

message LocalStorage {
  string root = 1;
}

message S3Storage {
  string region = 1;
  string bucket_name = 2;
}

message StorageResponse {
  oneof storage {
    LocalStorage local = 1;
    S3Storage s3 = 2;
  };
}

message DescribeApplicationResponse {
  map <string, BuildResponse> endpoints = 1;
}

message BuildRequest {
  string endpoint = 1;
}

message BuildResponse {
  string schema_string = 1;
}

message LogRequest {
  /// The endpoint name.
  string endpoint = 1;
  /// [start, end) interval.
  uint64 start = 2;
  /// [start, end) interval.
  uint64 end = 3;
  /// Send back any data that's available within the timeout, unless there's no data available.
  uint32 timeout_in_millis = 4;
}

message LogResponse {
  /// This is the bincode serialzied `LogResponse` struct.
  ///
  /// It's a dirty way to make things work quickly. We'll properly define the protobuf message later.
  bytes data = 1;
}
