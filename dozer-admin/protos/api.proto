syntax = "proto3";
package dozer_admin_grpc;
import "google/protobuf/any.proto";
service DozerApi {
  rpc test_connection(TestConnectionRequest) returns (TestConnectionResponse);
  rpc create_connection(CreateConnectionRequest) returns (CreateConnectionResponse);
  rpc get_connection_details(GetConnectionDetailsRequest) returns (GetConnectionDetailsResponse);
  rpc get_all_connections(GetAllConnectionRequest) returns (GetAllConnectionResponse);
  rpc get_schema(GetSchemaRequest) returns (GetSchemaResponse);

  rpc create_source(CreateSourceRequest) returns (CreateSourceResponse);
  rpc get_source(GetSourceRequest) returns (GetSourceResponse);
}

enum ConnectionType {
  postgres = 0;
  snowflake = 1;
  databricks = 2;
}
message TestConnectionRequest {
  ConnectionType type = 1;
  oneof authentication {
    PostgresAuthentication postgres = 2;
  }
}

message TestConnectionResponse {
  bool success = 1;
}

message PostgresAuthentication {
  string database = 1;
  string user = 2;
  string host = 3;
  string port = 4;
  string name = 5;
  string password = 6;
}

message ErrorResponse {
  string message = 1;
  google.protobuf.Any details = 2;
}

message CreateConnectionRequest {
  ConnectionType type = 1;
  oneof authentication {
    PostgresAuthentication postgres = 2;
  }
}
message CreateConnectionResponse {
  ConnectionInfo info = 1;
}

message ConnectionDetails {
  repeated TableInfo table_info = 1;
}

message TableInfo {
  string table_name = 1;
  repeated ColumnInfo columns = 2;
}
message ColumnInfo {
  string column_name = 1;
  bool is_nullable = 2;
  string udt_name = 3;
  bool is_primary_key = 4;
}

message GetSchemaRequest {
  string connection_id = 1;
}

message GetSchemaResponse {
  string connection_id = 1;
  ConnectionDetails details = 2;
}

message GetConnectionDetailsRequest {
  string connection_id = 1;
}
message GetConnectionDetailsResponse {
  ConnectionInfo info = 1;
  ConnectionDetails details = 2;
}

message GetAllConnectionRequest {
  uint64 page = 1;
  uint64 page_size = 2;
}

message ConnectionInfo {
  string id = 1;
  ConnectionType type = 2;
  oneof authentication {
    PostgresAuthentication postgres = 3;
  }
}

message GetAllConnectionResponse {
  repeated ConnectionInfo data = 1;
  Pagination pagination = 2;
}

message Pagination {
  uint64 limit = 1;
  uint64 page = 2;
  uint64 page_size = 3;
  uint64 total_records = 4;
  uint64 total_pages = 5;
}

message CreateSourceRequest {
  string name = 1;
  string dest_table_name = 2;
  string source_table_name = 3;
  oneof connection {
    string connection_id = 4;
    CreateConnectionRequest connection_info = 5;
  }
  HistoryType history_type = 6;
  RefreshConfig refresh_config = 7;

}
message CreateSourceResponse {
  SourceInfo info = 1;
  string id = 2;
}

message GetSourceRequest {
  string id = 1;
}
message GetSourceResponse {
  SourceInfo info = 1;
  string id = 2;
}

message HistoryType {
  oneof type {
    MasterHistoryType master = 6;
    TransactionalHistoryType transactional = 7;
  }
}

message RefreshConfig {
  oneof config {
    RefreshConfigHour hour = 1;
    RefreshConfigDay day = 2;
    RefreshConfigCronExpression cron_expression = 3;
    RefreshConfigRealTime realtime = 4;
  }
}
message SourceInfo {
  string name = 1;
  string dest_table_name = 2;
  string source_table_name = 3;
  optional string connection_id = 4;
  optional ConnectionInfo connection = 5;
  HistoryType history_type = 6;
  RefreshConfig refresh_config = 7;
}

message MasterHistoryType {
  oneof config {
    MasterHistoryConfigAppendOnly append_only = 1;
    MasterHistoryConfigOverwrite overwrite = 2;
  }
}
message MasterHistoryConfigAppendOnly {
  string type = 1;
  string unique_key_field = 2;
  string open_date_field = 3;
  string closed_date_field = 4;
}
message MasterHistoryConfigOverwrite {
  string type = 1;
}
message TransactionalHistoryType {
  oneof config {
    TransactionalHistoryConfigRetainPartial append_only = 1;
  }
}
message TransactionalHistoryConfigRetainPartial {
 string timestamp_field = 1;
 uint32 retention_period = 2;
}

message RefreshConfigHour {
  uint32 minute = 1;
}
message RefreshConfigDay {
  string time = 1;
}
message RefreshConfigCronExpression {
  string expression = 1;
}

message RefreshConfigRealTime {
  string type = 1;
}