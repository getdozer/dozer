syntax = "proto3";

package dozer.live;
import "types.proto";

service CodeService {  
  rpc LiveConnect(CommonRequest) returns (stream ConnectResponse);
  rpc Sources(SourcesRequest) returns (SchemasResponse);
  rpc Endpoints(CommonRequest) returns (SchemasResponse);
  rpc GenerateDot(CommonRequest) returns (DotResponse);
  rpc GetGraphSchemas(CommonRequest) returns (SchemasResponse);
  rpc GetSql(CommonRequest) returns (SqlResponse);
  rpc Run(RunRequest) returns (CommonResponse);
  rpc Stop(CommonRequest) returns (CommonResponse);
}

message CommonRequest {

}
message CommonResponse {
}

message LiveApp {
  string app_name = 1;
  repeated string connections = 2;  
  repeated string endpoints = 3;  
}
message LiveResponse {
  bool initialized = 1;
  bool running = 2;
  optional string error_message = 3;
  LiveApp app = 4;
}

message SourcesRequest {
  string connection_name = 1;
}

message SchemasResponse {
  map<string, Schema> schemas = 1;
}


message Schema  {
  // The list of indexes of the keys that are used as the primary index.
  repeated int32 primary_index = 1;
  // The list of field definitions.
  repeated dozer.types.FieldDefinition fields = 2;
}

message DotResponse {
  string dot = 1;
}

message RunRequest {
  oneof request {
    RunSqlRequest sql = 1;
    RunSourceRequest source = 2;
  }
}
message RunSqlRequest {
  string sql = 1;
}

message RunSourceRequest {
  string source = 1;
}

message SqlResponse {
  string sql = 1;
}

message ProgressResponse {
  map<string, Metric> progress = 1;
}

message Metric {
  uint32 value = 1;
  map<string, string> labels = 2;
  uint32 ts = 3;
}
message ConnectResponse {
  LiveResponse live = 1;
  ProgressResponse progress = 2;
}