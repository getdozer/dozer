syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";

package dozer.types;

// Event types that user can subscribe.
enum EventType {
  ALL = 0;         // All events.
  INSERT_ONLY = 1; // Only INSERT events.
  UPDATE_ONLY = 2; // Only UPDATE events.
  DELETE_ONLY = 3; // Only DELETE events.
}

// The event types.
enum OperationType {
  INSERT = 0; // INSERT operation.
  DELETE = 1; // DELETE operation.
  UPDATE = 2; // UPDATE operation.
}

// A Dozer event.
message Operation {
  // The operation type.
  OperationType typ = 1;
  // Old record data, only applicable for UPDATE type.
  optional Record old = 2;
  // New record data.
  Record new = 3;
  // New record id, only applicable for INSERT type.
  optional uint64 new_id = 4;
  // Name of the endpoint that this event is from.
  string endpoint_name = 5;
}

// A record, can be thought of a row in the database table.
message Record {
  // The list of field values.
  repeated Value values = 1;
  // Records with same primary key will have increasing version.
  uint32 version = 2;
}

// A record with its id in cache.
message RecordWithId {
  // The record id.
  uint64 id = 1;
  // The record data.
  Record record = 2;
}

// Supported data types in Dozer.
enum Type {
  UInt = 0;       // Unsigned 64 bit integer.
  U128 = 1;       // Unsigned 128 bit integer.
  Int = 2;        // Signed 64 bit integer.
  I128 = 3;       // Signed 128 bit integer.
  Float = 4;      // 64 bit floating point number.
  Boolean = 5;    // Boolean.
  String = 6;     // UTF-8 string.
  Text = 7;       // UTF-8 string.
  Binary = 8;     // Binary data.
  Decimal = 9;    // Decimal number.
  Timestamp = 10; // ISO 8601 combined date and time with time zone.
  Date = 11;      // ISO 8601 calendar date without timezone.
  Json = 12;      // JSON data.
  Point = 13;     // Geo Point type.
  Duration = 14;  // Duration type.
}
message SchemaEvent {
  string endpoint = 1;
  uint64 version = 2;
  repeated int32 primary_index = 3;
  repeated FieldDefinition fields = 4;
}

// `FieldDefinition` defines a field in a schema.
message FieldDefinition {
  // The field type.
  Type typ = 1;
  // The field name.
  string name = 2;
  // Whether the field is nullable.
  bool nullable = 3;
}

message PointType {
  double x = 1;
  double y = 2;
}

message DurationType {
  string value = 1;      // up to u128
  string time_unit = 2;  // nanoseconds by default
}

// rust-decimal as a message
message RustDecimal {
  // the lo, mid, hi, and flags fields contain the representation of the Decimal
  // value as a 96-bit integer
  uint32 scale = 1;
  uint32 lo = 2;
  uint32 mid = 3;
  uint32 hi = 4;
  bool negative = 5;
}

// A field value.
message Value {
  // A field value.
  oneof value {
    uint64 uint_value = 1;      // Unsigned 64 bit integer.
    string uint_128_value = 2;  // Unsigned 128 bit integer.
    int64 int_value = 3;        // Signed 64 bit integer.
    string int_128_value = 4;   // Signed 128 bit integer.
    double float_value = 5;     // 64 bit floating point number.
    bool bool_value = 6;        // Boolean.
    string string_value = 7;    // UTF-8 string.
    bytes bytes_value = 8;      // Binary data.
    RustDecimal decimal_value = 9;                  // Decimal value.
    google.protobuf.Timestamp timestamp_value = 10; // DateTime & Timestamp.
    string date_value = 11;                 // ISO 8601 calendar date without timezone.
    PointType point_value = 12;             // Point type.
    DurationType duration_value = 13;       // Duration type.
    google.protobuf.Value json_value = 14;  // JSON type.
  };
}
