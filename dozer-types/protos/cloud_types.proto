syntax = "proto3";
package dozer.cloud;

message AppConfig {
  string app_name = 2;
  string home_dir = 3;
  string cache_dir = 4;
  repeated Connection connections = 5;
  repeated Source sources = 6;
  repeated Endpoint endpoints = 7;
  ApiConfig api = 8;
  optional string sql = 9;
  Flags flags = 10;
  optional uint64 cache_max_map_size = 11;
}
message Flags {
  bool dynamic = 1;
  bool grpc_web = 2;
  bool push_events = 3;
  bool authenticate_server_reflection = 4;
}

message Connection {
  oneof config {
    PostgresConfig Postgres = 1;
    EthereumConfig Ethereum = 2;
    GrpcConfig Grpc = 3;
    SnowflakeConfig Snowflake = 4;
    KafkaConfig Kafka = 5;
    S3Storage S3Storage = 6;
    LocalStorage LocalStorage = 7;
    DeltaLakeConfig DeltaLake = 8;
  }
  string name = 9;
}

message ConnectionConfig {
  oneof config {
    PostgresConfig Postgres = 1;
    EthereumConfig Ethereum = 2;
    GrpcConfig Grpc = 3;
    SnowflakeConfig Snowflake = 4;
    KafkaConfig Kafka = 5;
    S3Storage S3Storage = 6;
    LocalStorage LocalStorage = 7;
    DeltaLakeConfig DeltaLake = 8;
  }
}
message DeltaLakeConfig {
  repeated Table tables = 1;
}
message S3Storage {
  S3Details details = 1;
  repeated Table tables = 2;
}

message S3Details {
  string access_key_id = 1;
  string secret_access_key = 2;
  string region = 3;
  string bucket_name = 4;
}

message LocalStorage {
  LocalDetails details = 1;
  repeated Table tables = 2;
}

message LocalDetails {
  string path = 1;
}

message Table {
  string name = 1;
  string prefix = 2;
  string file_type = 3;
  string extension = 4;
}

message SnowflakeConfig {
  string server = 1;
  string port = 2;
  string user = 3;
  string password = 4;
  string database = 5;
  string schema = 6;
  string warehouse = 7;
  optional string driver = 8;
}
message PostgresConfig {
  string user = 1;
  string password = 2;
  string host = 3;
  uint32 port = 4;
  string database = 5;
}

message GrpcConfig {
  string host = 1;
  uint32 port = 2;
  oneof schemas {
    string Inline = 3;
    string Path = 4;
  }
  string adapter = 5;
}

message KafkaConfig {
  string broker = 1;
  string topic = 2;
  optional string schema_registry_url = 3;
}
message EventsConfig { string database = 1; }

message EthereumConfig {
  EthereumFilter filter = 1;
  string wss_url = 2;
  string name = 3;
  repeated EthContract contracts = 4;
}

message EthereumFilter {
  optional uint64 from_block = 1;
  repeated string addresses = 2;
  repeated string topics = 3;
}
message EthContract {
  string name = 1;
  string address = 2;
  string abi = 3;
}

message TableInfo {
  string table_name = 1;
  repeated ColumnInfo columns = 2;
}
message ColumnInfo {
  string column_name = 1;
  bool is_nullable = 2;
}

message Endpoint {
  string name = 1;
  string table_name = 2;
  string path = 3;
  ApiIndex index = 4;
}

message ApiIndex { repeated string primary_key = 1; }

message Source {
  string name = 1;
  string table_name = 2;
  repeated string columns = 3;
  string connection = 4;
  optional string schema = 5;
  RefreshConfig refresh_config = 7;
}

message ApiConfig {
  oneof ApiSecurity { string Jwt = 1; }
  RestApiOptions rest = 2;
  GrpcApiOptions grpc = 3;
  GrpcApiOptions app_grpc = 4;
}

message RestApiOptions {
  uint32 port = 1;
  string url = 2;
  bool cors = 3;
}
message GrpcApiOptions {
  uint32 port = 1;
  string url = 2;
  bool cors = 3;
  bool web = 4;
}
message RefreshConfig {
  oneof config {
    RefreshConfigHour hour = 1;
    RefreshConfigDay day = 2;
    RefreshConfigCronExpression cron_expression = 3;
    RefreshConfigRealTime realtime = 4;
  }
}
message RefreshConfigHour { uint32 minute = 1; }
message RefreshConfigDay { string time = 1; }
message RefreshConfigCronExpression { string expression = 1; }
message RefreshConfigRealTime {}

message File {
  string name = 1;
  string content = 2;
}

message LogMessage {
  string message = 1;
  string from = 2;
}

message StatusUpdate {
  string source = 1;
  string type = 2;
  uint64 count = 3;
}