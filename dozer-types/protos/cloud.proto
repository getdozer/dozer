syntax = "proto3";
package dozer.cloud;
import "cloud_types.proto";

service DozerCloud {
  rpc create_application(CreateAppRequest) returns (AppResponse);
  rpc update_application(UpdateAppRequest) returns (AppResponse);
  rpc delete_application(DeleteAppRequest) returns (DeleteAppResponse);
  rpc list_applications(ListAppRequest) returns (ListAppResponse);
  rpc list_app_connections(ListAppConnectionRequest) returns (GetAllConnectionResponse);
  rpc list_app_sources(ListSourceRequest) returns (ListSourceResponse);
  rpc list_app_endpoints(ListEndpointRequest) returns (ListEndpointResponse);

  rpc get_connection(GetConnectionRequest) returns (ConnectionResponse);

  rpc parse_sql(ParseRequest) returns (ParseResponse);
  rpc parse_yaml(ParseYamlRequest) returns (ParseYamlResponse);
  rpc generate_yaml(GenerateYamlRequest) returns (GenerateYamlResponse);
  rpc generate_graph(GenerateGraphRequest) returns (GenerateGraphResponse);
  rpc get_application(GetAppRequest) returns (AppResponse);
  rpc validate_connection(ConnectionRequest)
      returns (ValidateConnectionResponse);
  rpc create_connection(ConnectionRequest) returns (ConnectionResponse);
  rpc list_connections(GetAllConnectionRequest)
      returns (GetAllConnectionResponse);
  rpc get_tables(GetTablesRequest) returns (GetTablesResponse);
  rpc update_connection(UpdateConnectionRequest) returns (ConnectionResponse);

  rpc start_dozer(StartRequest) returns (StartResponse);
  rpc stop_dozer(StopRequest) returns (StopResponse);
  rpc get_status(GetStatusRequest) returns (GetStatusResponse);

  rpc list_files(ListFilesRequest) returns (ListFilesResponse);
  rpc save_files(SaveFilesRequest) returns (SaveFilesResponse);
  rpc OnLogMessage(LogMessageRequest) returns (stream LogMessage);
  rpc OnStatusUpdate(StatusUpdateRequest) returns (stream StatusUpdate);
}

service DozerPublic {
  rpc company_metadata(CompanyRequest) returns (CompanyResponse);
}

message ListEndpointRequest {
  string app_id = 1;
  optional uint32 limit = 2;
  optional uint32 offset = 3;
}

message ListEndpointResponse {
    repeated EndpointResponse endpoints = 1;
    Pagination pagination = 2;
}

message EndpointResponse {
  string id = 1;
  Endpoint endpoint = 2;
  string yaml_content = 3; 
}

message ListSourceRequest {
  string app_id = 1;
  optional uint32 limit = 2;
  optional uint32 offset = 3;
}

message ListSourceResponse {
    repeated SourceResponse sources = 1;
    Pagination pagination = 2;
}

message SourceResponse {
  string id = 1;
  Source source = 2;
  string yaml_content = 3;
}

message ListAppConnectionRequest {
  string app_id = 1;
  optional uint32 limit = 2;
  optional uint32 offset = 3;
}
message StartRequest { string id = 1; }
message StartResponse {
  bool success = 1;
  string id = 2;
  optional string api_endpoint = 3;
}
message StopRequest { string id = 1; }
message StopResponse { bool success = 1; }

message GetStatusRequest { string id = 1; }
message GetStatusResponse {
  string state = 1;
  optional string api_endpoint = 2;
  optional uint32 rest_port = 3;
  optional string grpc_port = 4;
}

message CreateAppRequest {
  repeated File files = 3;
}
message ParseRequest { string sql = 1; }
message ParseResponse {
  repeated string used_sources = 1;
  repeated string output_tables = 3;
}

message GenerateGraphRequest { string config = 1; }
message GenerateGraphResponse { QueryGraph graph = 3; }

message ParseYamlRequest { string config = 1; }
message ParseYamlResponse { AppConfig app = 1; }

message GenerateYamlRequest { AppConfig app = 1; }
message GenerateYamlResponse {
  repeated string connections = 1;

  repeated string sources = 2;

  repeated string endpoints = 3;
}

message AppResponse {
  string id = 1;
  AppConfig app = 2;
}

message ListAppRequest {
  optional uint32 limit = 1;
  optional uint32 offset = 2;
}
message ListAppResponse {
  repeated AppResponse apps = 1;
  Pagination pagination = 2;
}

message UpdateAppRequest {
  string id = 1;
  repeated File files = 2;
}

message DeleteAppRequest {
  string id = 1;
}
message DeleteAppResponse { bool success = 1; }

message GetAppRequest { optional string app_id = 1; }
message ConnectionRequest { Connection connection = 1; }
message GetConnectionRequest {
  string connection_id = 1;
}
message ValidateConnectionResponse { bool success = 1; }
message ConnectionResponse {
  string id = 1;
  Connection connection = 2;
  string yaml_content = 3;
}

message GetTablesRequest { string connection_id = 2; }

message GetTablesResponse {
  string connection_id = 1;
  repeated TableInfo tables = 2;
}

message GetAllConnectionRequest {
  optional uint32 limit = 2;
  optional uint32 offset = 3;
}
message GetAllConnectionResponse {
  repeated ConnectionResponse connections = 1;
  Pagination pagination = 2;
}
message UpdateConnectionRequest {
  Connection connection = 1;
  string connection_id = 3;
}
message ListFilesRequest {
}
message ListFilesResponse {
  repeated File files = 1;
}
message SaveFilesRequest {
  repeated File files = 1;
}
message SaveFilesResponse {
}
message LogMessageRequest {
  string app_id = 1;
}
message StatusUpdateRequest {
  string app_id = 1;
}
message Pagination {
  uint32 limit = 1;
  uint32 offset = 2;
  uint32 total = 3;
}

message ErrorResponse { string message = 1; }

enum QueryNodeType {
  CONNECTION = 0;
  SOURCE = 1;
  TRANSFORMER = 2;
  TABLE = 3;
  API = 4;
}
message QueryNode {
  string name = 1;
  QueryNodeType node_type = 2;
  uint32 idx = 3;
  uint32 id = 4;
}

message QueryEdge {
  uint32 from = 1;
  uint32 to = 2;
}

message QueryGraph {
  repeated QueryNode nodes = 1;
  repeated QueryEdge edges = 2;
}
message CompanyRequest {
    string name = 1;
}
message CompanyResponse {
    string name = 1;
    string cli_client_id = 2;
    string region = 3;
    string user_pool_id = 4;
    string user_pool_name = 5;
    string redirect_url = 6;
    string domain_name = 7;
    string callback_url = 8;
}