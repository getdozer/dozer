syntax = "proto3";

package dozer.contract;

import "types.proto";

service ContractService {
  rpc Sources(SourcesRequest) returns (SchemasResponse);
  rpc Endpoints(CommonRequest) returns (SchemasResponse);
  rpc GenerateDot(CommonRequest) returns (DotResponse);
  rpc GetGraphSchemas(CommonRequest) returns (SchemasResponse);
  rpc GetProtos(CommonRequest) returns (ProtoResponse);
  rpc GetApiToken(GetApiTokenRequest) returns (GetApiTokenResponse);
}

message GetApiTokenRequest {
  // required if in cloud context.
  optional string app_id = 1;
}
message GetApiTokenResponse {
  optional string token = 1;
}
message CloudDeploymentId {
  string app_id = 1;
  uint32 deployment = 2;
}

message SourcesRequest {
  // Only used in cloud context.
  optional CloudDeploymentId cloud_id = 1;
  string connection_name = 2;
}
  
message CommonRequest {
  // Only used in cloud context.
  optional CloudDeploymentId cloud_id = 1;
}

message SchemasResponse {
  map<string, Schema> schemas = 1;
}

message Schema  {
  // The list of indexes of the keys that are used as the primary index.
  repeated int32 primary_index = 1;
  // The list of field definitions.
  repeated dozer.types.FieldDefinition fields = 2;
}

message DotResponse {
  string dot = 1;
}

message ProtoResponse {
  repeated string protos = 1;
  repeated string libraries = 2;
}