name: Dozer Main
# Long running tests, Performance benchmarks, Code vulnerability, Code coverage etc
on:
  push:
    branches: [main]

concurrency:
  group: main
  cancel-in-progress: true

jobs:
  # Run coverage
  coverage:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install stable with llvm-tools-preview
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: llvm-tools-preview

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: MongoDB in GitHub Actions
        uses: supercharge/mongodb-github-action@1.8.0

      - uses: ./.github/workflows/setup-snowflake-and-kafka

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "cargo-test-%p-%m.profraw"
          ETH_WSS_URL: ${{ secrets.ETH_WSS_URL }}

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: connector_e2e_ --all-features -- --ignored
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "cargo-test-%p-%m.profraw"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - id: coverage
        run: |
          cargo install grcov
          grcov . --binary-path ./target/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" --ignore 'target/*' -o target/coverage.lcov
          echo "::set-output name=report::target/coverage.lcov"

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            ${{ steps.coverage.outputs.report }}
          retention-days: 10

      - id: coveralls
        name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            Coverage: ${{ job.status }}

            Last Commit: ${{ github.event.head_commit.url }}

            Response: ${{ steps.coveralls.outputs.coveralls-api-result }}
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Run benches
  bench:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: âš¡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/release
          key: ${{ runner.os }}-cargo-release-bench-
          restore-keys: |
            ${{ runner.os }}-cargo-release-bench-
            ${{ runner.os }}-cargo-release-

      - uses: ./.github/workflows/setup-snowflake-and-kafka
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SNOWFLAKE_SERVER: ${{ secrets.SNOWFLAKE_SERVER }}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          DEBEZIUM_TABLE_NAME: ${{ secrets.DEBEZIUM_TABLE_NAME }}
          DEBEZIUM_KAFKA_BROKER: ${{ secrets.DEBEZIUM_KAFKA_BROKER }}
          DEBEZIUM_KAFKA_TOPIC: ${{ secrets.DEBEZIUM_KAFKA_TOPIC }}
          DEBEZIUM_KAFKA_WITH_REGISTRY_BROKER: ${{ secrets.DEBEZIUM_KAFKA_WITH_REGISTRY_BROKER }}
          DEBEZIUM_KAFKA_SCHEMA_REGISTRY_URL: ${{ secrets.DEBEZIUM_KAFKA_SCHEMA_REGISTRY_URL }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_DATABASE: ${{ secrets.POSTGRES_DATABASE }}
          KAFKA_CONNECTOR_URL: ${{ secrets.KAFKA_CONNECTOR_URL }}
          POSTGRES_SCHEMA: ${{ secrets.POSTGRES_SCHEMA }}

      - name: Install Criterion
        continue-on-error: true
        run: cargo install cargo-criterion

      - id: bench
        name: Run Bench
        continue-on-error: true
        run: cargo criterion --features snowflake,debezium_bench,postgres_bench

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: keithweaver/aws-s3-github-action@v1.0.0
        continue-on-error: true
        with:
          command: sync
          source: ./target/criterion
          destination: s3://dozer-ci/${{ steps.date.outputs.date }}/criterion
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_S3 }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_S3 }}
          aws_region: ap-southeast-1

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            Criterion: ${{ job.status }}

            Criterion Report: https://dozer-ci.s3.ap-southeast-1.amazonaws.com/${{ steps.date.outputs.date }}/criterion/reports/index.html
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
