name: Unit Tests

on:
  # workflow_dispatch:
  # pull_request_target:
  #   branches: [main]
  # merge_group:
  push:
    branches: [chore/modify-ci]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: unit/${{ github.ref }}
  cancel-in-progress: true

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  # Run unit tests
  unit:
    timeout-minutes: 60
    runs-on: ["self-hosted", "linux", "x64", "ubuntu-latest"]
    services:
      postgres:
        image: debezium/postgres:13
        ports:
          - 5434:5432
        env:
          POSTGRES_DB: dozer_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          ALLOW_IP_RANGE: 0.0.0.0/0
        #        command: postgres -c hba_file=/var/lib/stock-sample/pg_hba.conf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
          build-essential \
          libssl-dev \
          pkg-config \
          odbcinst \
          unixodbc \
          unixodbc-dev \
          gcc-x86-64-linux-gnu

      - uses: actions/setup-python@v4
        env:
          AGENT_TOOLSDIRECTORY: /opt/actions-runner/_work/_tool
        with:
          python-version: "3.10"
          architecture: x64

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable

      - if: github.event_name == 'pull_request_target'
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - if: github.event_name != 'pull_request_target'
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # - name: Rust cache
      #   uses: swatinem/rust-cache@v2

      - name: MongoDB in GitHub Actions
        uses: supercharge/mongodb-github-action@1.8.0

      - uses: ./.github/workflows/setup-snowflake-and-kafka

      - uses: ./.github/workflows/setup-mysql-and-mariadb

      - name: Run connectors tests
        env:
          SN_SERVER: ${{ secrets.SN_SERVER }}
          SN_USER: ${{ secrets.SN_USER }}
          SN_PASSWORD: ${{ secrets.SN_PASSWORD }}
          SN_DATABASE: ${{ secrets.SN_DATABASE }}
          SN_WAREHOUSE: ${{ secrets.SN_WAREHOUSE }}
          SN_DRIVER: ${{ secrets.SN_DRIVER }}
        shell: bash
        run: |
          cargo test test_connector_ --lib --features snowflake,ethereum,kafka  --no-fail-fast -- --ignored

      - name: Run tests
        shell: bash
        run: |
          source ./dozer-tests/python_udf/virtualenv.sh
          cargo test --features snowflake,ethereum,kafka,mongodb --no-fail-fast
