name: Release
on:
  push:
    branches: [release, release-dev, main]
    tags:
      - "v*.*.*"
env:
  CARGO_TERM_COLOR: always
  BUCKET_NAME: "dozer-releases"
  ECR_REGISTRY: public.ecr.aws/k7k6x1d4
  ECR_REPOSITORY: dozer

permissions:
  id-token: write # This is required for requesting the JWT
  contents: write # This is required for actions/checkout

jobs:
  # https://github.com/orhun/git-cliff/blob/main/.github/workflows/cd.yml
  prepare:
    name: Prepare
    runs-on: ubuntu-20.04
    timeout-minutes: 60
    outputs:
      release_body: ${{ steps.release.outputs.release_body }}
      version: ${{ steps.version.outputs.version }}
      prerelease: ${{ steps.version.outputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        id: git-cliff
        with:
          config: .github/config/cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Set the release body
        id: release
        shell: bash
        run: |
          r=$(cat ${{ steps.git-cliff.outputs.changelog }})
          r="$(printf "$r" | tail -n +3)"
          r="${r//'%'/'%25'}"
          r="${r//$'\n'/'%0A'}"
          r="${r//$'\r'/'%0D'}"
          echo "::set-output name=release_body::$r"

      - name: Set release version
        id: version
        run: |
          tag=$(printf "%q" ${{ github.ref_name }})

          if [[ $tag =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::set-output name=version::$tag"
            echo "::set-output name=prerelease::false"
          else
            echo "::set-output name=version::dev"
            echo "::set-output name=prerelease::true"
          fi
  release:
    name: Release
    runs-on: ${{ matrix.os }}
    needs: prepare
    timeout-minutes: 60
    strategy:
      matrix:
        os: [ubuntu-20.04]
        include:
          - os: ubuntu-20.04
            file_name: dozer
            asset_name: dozer-linux-amd64
          # - os: macos-12
          #   file_name: dozer
          #   asset_name: dozer-macos-amd64
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: âš¡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-release-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-release-

      - name: Prepare build package
        run: cargo build --features=snowflake --release

      - name: Prepare release assets
        shell: bash
        run: |
          mkdir -p release
          cp {LICENSE,README.md,CHANGELOG.md} release/ 2> /dev/null || echo "Copy Failed...Ignoring.."
          cp target/release/${{matrix.file_name}} release/

          mv release/ ${{matrix.asset_name}}-${{ needs.prepare.outputs.version }}/

          tar -czvf ${{matrix.asset_name}}-${{ needs.prepare.outputs.version }}.tar.gz \
              ${{matrix.asset_name}}-${{ needs.prepare.outputs.version }}/

      - name: Upload the release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{matrix.asset_name}}-${{ needs.prepare.outputs.version }}*
          file_glob: true
          overwrite: true
          tag: ${{ needs.prepare.outputs.version }}
          release_name: "Development Release - ${{ needs.prepare.outputs.version }}"
          prerelease: ${{ needs.prepare.outputs.prerelease }}
          body: "${{ needs.prepare.outputs.release_body }}"

      - name: Set env variables
        env: 
          VERSION: ${{ needs.prepare.outputs.version }}
          RELEASE_NAME: ${{matrix.asset_name}}-${{ needs.prepare.outputs.version }}.tar.gz
        run: |
          echo "RELEASE_NAME=${{env.RELEASE_NAME}}" >> $GITHUB_ENV
          echo "VERSION=${{env.VERSION}}" >> $GITHUB_ENV
          echo "ARTIFACT_URL=https://${{ env.BUCKET_NAME }}.s3.ap-southeast-1.amazonaws.com/${{ env.VERSION }}/${{ env.RELEASE_NAME }}" >> $GITHUB_ENV
          
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: deployer
          aws-region: ap-southeast-1

      - name: Upload release to S3
        id: upload_s3
        run: |
          aws s3 cp $RELEASE_NAME s3://${{ env.BUCKET_NAME }}/$VERSION/$RELEASE_NAME

      - name: Build, tag, and push image to Amazon ECR
        if: matrix.os == 'ubuntu-20.04'
        env:
          IMAGE_TAG: ${{ needs.prepare.outputs.version }}
        run: |
          aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker build -f ci/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY --all-tags

      - name: Update latest image if releasing
        if: (!needs.prepare.outputs.prerelease) && (matrix.os == 'ubuntu-20.04')
        env:
          IMAGE_TAG: ${{ needs.prepare.outputs.version }}
        run: |
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

#      - name: Clean up Amazon ECR untagged images
#        run: |
#          IMAGES_TO_DELETE=$( aws ecr list-images --region us-east-1 --repository-name $ECR_REPOSITORY --filter "tagStatus=UNTAGGED" --query 'imageIds[*]' --output json )
#          aws ecr batch-delete-image --region us-east-1 --repository-name $ECR_REPOSITORY --image-ids "$IMAGES_TO_DELETE" || true

      - name: Trigger BuildKite integration tests
        run: |
          curl -X POST "https://api.buildkite.com/v2/organizations/dozer-data-pte-ltd/pipelines/integration-tests/builds" \
            --header 'Authorization: Bearer ${{ secrets.BUILDKITE_API_ACCESS_TOKEN_WRITE_BUILDS }}' \
            -d '{ "commit": "${{ github.sha }}", "branch": "${{ github.ref_name }}", "env": { "DOZER_VERSION": "${{ github.sha }}" }, "ignore_pipeline_branch_filters": true }'
