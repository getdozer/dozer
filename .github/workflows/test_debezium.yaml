name: Dozer Scheduled

# Github action for running debezium tests and benchmarks

on:
  push:
    branches: [feat/debezium-pg]

concurrency:
  cancel-in-progress: true

jobs:
  # Run coverage on nightly
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Snowflake ODBC driver
        run: curl ${SNOWFLAKE_DRIVER_URL} -o snowflake_driver.deb && sudo dpkg -i snowflake_driver.deb
        env:
          SNOWFLAKE_DRIVER_URL: https://sfc-repo.snowflakecomputing.com/odbc/linux/2.25.7/snowflake-odbc-2.25.7.x86_64.deb

      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVER: ${{ secrets.SNOWFLAKE_SERVER }}
          USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        with:
          from_file: "config/test.snowflake.sample.yaml"
          to_file: "config/dozer-config.test.snowflake.yaml"
          commit: "false"

      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBEZIUM_TABLE_NAME: ${{ secrets.DEBEZIUM_TABLE_NAME }}
          DEBEZIUM_KAFKA_TOPIC: ${{ secrets.DEBEZIUM_KAFKA_TOPIC }}
          KAFKA_POSTGRES_USER: ${{ secrets.KAFKA_POSTGRES_USER }}
          KAFKA_POSTGRES_PASSWORD: ${{ secrets.KAFKA_POSTGRES_PASSWORD }}
          KAFKA_POSTGRES_HOST: ${{ secrets.KAFKA_POSTGRES_HOST }}
          KAFKA_POSTGRES_PORT: ${{ secrets.KAFKA_POSTGRES_PORT }}
          KAFKA_POSTGRES_DATABASE: ${{ secrets.KAFKA_POSTGRES_DATABASE }}
          KAFKA_CONNECTOR_URL: ${{ secrets.KAFKA_CONNECTOR_URL }}
        with:
          from_file: "config/test.debezium.sample.yaml"
          to_file: "config/test.debezium.yaml"
          commit: "false"


      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBEZIUM_TABLE_NAME: ${{ secrets.DEBEZIUM_TABLE_NAME }}
          DEBEZIUM_KAFKA_TOPIC: ${{ secrets.DEBEZIUM_KAFKA_TOPIC }}
          KAFKA_POSTGRES_USER: ${{ secrets.KAFKA_POSTGRES_USER }}
          KAFKA_POSTGRES_HOST: ${{ secrets.KAFKA_POSTGRES_HOST }}
          KAFKA_POSTGRES_PORT: ${{ secrets.KAFKA_POSTGRES_PORT }}
          KAFKA_POSTGRES_DATABASE: ${{ secrets.KAFKA_POSTGRES_DATABASE }}
          KAFKA_POSTGRES_SCHEMA: ${{ secrets.KAFKA_POSTGRES_SCHEMA }}
        with:
          from_file: "tests/connectors/debezium/register-postgres.test.sample.yaml"
          to_file: "tests/connectors/debezium/register-postgres.test.yaml"
          commit: "false"

      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --no-fail-fast
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off  -Cpanic=abort -Zpanic_abort_tests"

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - id: coverage
        uses: actions-rs/grcov@v0.1
        with:
          config: .github/grcov.yml

      - uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: |
            ${{ steps.coverage.outputs.report }}
          retention-days: 10

      - id: coveralls
        name: Coveralls upload
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: ${{ steps.coverage.outputs.report }}

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            Coverage: ${{ job.status }}

            Last Commit: ${{ github.event.pull_request.html_url || github.event.head_commit.url }}

            Response: ${{ steps.coveralls.outputs.coveralls-api-result }}
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  # Run benches on stable
  bench:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1

      - name: ⚡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/release
          key: ${{ runner.os }}-cargo-release-bench-
          restore-keys: |
            ${{ runner.os }}-cargo-release-bench-
            ${{ runner.os }}-cargo-release-

      - name: Install Snowflake ODBC driver
        run: curl ${SNOWFLAKE_DRIVER_URL} -o snowflake_driver.deb && sudo dpkg -i snowflake_driver.deb
        env:
          SNOWFLAKE_DRIVER_URL: https://sfc-repo.snowflakecomputing.com/odbc/linux/2.25.7/snowflake-odbc-2.25.7.x86_64.deb

      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVER: ${{ secrets.SNOWFLAKE_SERVER }}
          USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
        with:
          from_file: "config/test.snowflake.sample.yaml"
          to_file: "config/dozer-config.test.snowflake.yaml"
          commit: "false"

      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBEZIUM_TABLE_NAME: ${{ secrets.DEBEZIUM_TABLE_NAME }}
          DEBEZIUM_KAFKA_TOPIC: ${{ secrets.DEBEZIUM_KAFKA_TOPIC }}
          KAFKA_POSTGRES_USER: ${{ secrets.KAFKA_POSTGRES_USER }}
          KAFKA_POSTGRES_PASSWORD: ${{ secrets.KAFKA_POSTGRES_PASSWORD }}
          KAFKA_POSTGRES_HOST: ${{ secrets.KAFKA_POSTGRES_HOST }}
          KAFKA_POSTGRES_PORT: ${{ secrets.KAFKA_POSTGRES_PORT }}
          KAFKA_POSTGRES_DATABASE: ${{ secrets.KAFKA_POSTGRES_DATABASE }}
          KAFKA_CONNECTOR_URL: ${{ secrets.KAFKA_CONNECTOR_URL }}
        with:
          from_file: "config/test.debezium.sample.yaml"
          to_file: "config/test.debezium.yaml"
          commit: "false"


      - uses: franzbischoff/replace_envs@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DEBEZIUM_TABLE_NAME: ${{ secrets.DEBEZIUM_TABLE_NAME }}
          DEBEZIUM_KAFKA_TOPIC: ${{ secrets.DEBEZIUM_KAFKA_TOPIC }}
          KAFKA_POSTGRES_USER: ${{ secrets.KAFKA_POSTGRES_USER }}
          KAFKA_POSTGRES_HOST: ${{ secrets.KAFKA_POSTGRES_HOST }}
          KAFKA_POSTGRES_PORT: ${{ secrets.KAFKA_POSTGRES_PORT }}
          KAFKA_POSTGRES_DATABASE: ${{ secrets.KAFKA_POSTGRES_DATABASE }}
          KAFKA_POSTGRES_SCHEMA: ${{ secrets.KAFKA_POSTGRES_SCHEMA }}
        with:
          from_file: "tests/connectors/debezium/register-postgres.test.sample.yaml"
          to_file: "tests/connectors/debezium/register-postgres.test.yaml"
          commit: "false"
      - name: Install Criterion
        continue-on-error: true
        run: cargo install cargo-criterion

      - id: bench
        name: Run Bench
        continue-on-error: true
        run: cargo criterion --features snowflake

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: keithweaver/aws-s3-github-action@v1.0.0
        continue-on-error: true
        with:
          command: sync
          source: ./target/criterion
          destination: s3://dozer-ci/${{ steps.date.outputs.date }}/criterion
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_S3 }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_S3 }}
          aws_region: ap-southeast-1

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            Criterion: ${{ job.status }}

            Criterion Report: https://dozer-ci.s3.ap-southeast-1.amazonaws.com/${{ steps.date.outputs.date }}/criterion/reports/index.html
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

  test_long:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: ⚡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test -- nightly_long_ --ignored

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: keithweaver/aws-s3-github-action@v1.0.0
        continue-on-error: true
        with:
          command: cp
          source: ./dozer-tests/logs/sql-tests.log
          destination: s3://dozer-ci/${{ steps.date.outputs.date }}/sql-tests.txt
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_S3 }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_S3 }}
          aws_region: ap-southeast-1

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            SQL log: https://dozer-ci.s3.ap-southeast-1.amazonaws.com/${{ steps.date.outputs.date }}/sql-tests.txt
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
