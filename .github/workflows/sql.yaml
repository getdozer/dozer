name: Dozer Long Running Tests

on:
  push:
    branches: [feat/test-framework]

env:
  CARGO_TERM_COLOR: always

concurrency:
  group: long
  cancel-in-progress: true

jobs:
  test_long:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install minimal stable with clippy and rustfmt
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: âš¡ Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/.crates.toml
            ~/.cargo/.crates2.json
            ~/.cargo/.package-cache
            ~/.cargo/registry/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('Cargo.lock') }}
            ${{ runner.os }}-cargo-

      - name: Run tests
        run: cargo test -- nightly_long_ --ignored

      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      - uses: keithweaver/aws-s3-github-action@v1.0.0
        continue-on-error: true
        with:
          command: sync
          source: ./logs/sql.log
          destination: s3://getdozer/dozer-ci/${{ steps.date.outputs.date }}/sql.log
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID_FOR_S3 }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_FOR_S3 }}
          aws_region: ap-southeast-1

      - name: Post to a Slack channel
        id: slack
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.23.0
        with:
          channel-id: "release-notifications"
          slack-message: |
            ```
            SQL log: https://dozer-ci.s3.ap-southeast-1.amazonaws.com/${{ steps.date.outputs.date }}/sql.log
            ```
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
