syntax = "proto3";

package dozer.types;

// Event types that user can subscribe.
enum EventType {
  ALL = 0; // All events.
  INSERT_ONLY = 1; // Only INSERT events.
  UPDATE_ONLY = 2; // Only UPDATE events.
  DELETE_ONLY = 3; // Only DELETE events.
}

// The event types.
enum OperationType {
  INSERT = 0; // INSERT operation.
  DELETE = 1; // DELETE operation.
  UPDATE = 2; // UPDATE operation.
}

// A Dozer event.
message Operation {
  // The operation type.
  OperationType typ = 1;
  // Old record data, only applicable for UPDATE type.
  optional Record old = 2;
  // New record data.
  Record new = 3;
  // Name of the endpoint that this event is from.
  string endpoint_name = 4;
}

// A record, can be thought of a row in the database table.
message Record {
  // The list of field values.
  repeated Value values = 1;
  // Records with same primary key will have increasing version.
  uint32 version = 2;
}

// A record with its id in cache.
message RecordWithId {
  // The record id.
  uint64 id = 1;
  // The record data.
  Record record = 2;
}

// Supported data types in Dozer.
enum Type {
  UInt = 0; // Unsigned 64 bit integer.
  Int = 1; // Signed 64 bit integer.
  Float = 2; // 64 bit floating point number.
  Boolean = 3; // Boolean.
  String = 4; // UTF-8 string.
  Text = 5;   // UTF-8 string.
  Binary = 6; // Binary data.
  Decimal = 7; // Decimal number.
  Timestamp = 8; // ISO 8601 combined date and time with time zone.
  Date = 9; // ISO 8601 calendar date without timezone.
  Bson = 10; // BSON data.
}
message SchemaEvent {
  string endpoint = 1;
  uint64 version = 2;
  repeated int32 primary_index = 3;
  repeated FieldDefinition fields = 4;
}

// `FieldDefinition` defines a field in a schema.
message FieldDefinition {
  // The field type.
  Type typ = 1;
  // The field name.
  string name = 2;
  // Whether the field is nullable.
  bool nullable = 3;
}

// A field value.
message Value {
  // A field value.
  oneof value {
    uint64 uint_value = 2; // Unsigned 64 bit integer.
    int64 int_value = 3; // Signed 64 bit integer.
    float float_value = 4; // 32 bit floating point number.
    bool bool_value = 5; // Boolean.
    string string_value = 6; // UTF-8 string.
    bytes bytes_value = 7; // Binary data.
    ArrayValue array_value = 8; // Value array.
    double double_value = 9; // 64 bit floating point number.
  };
}

// A value array.
message ArrayValue {
  // The list of element values.
  repeated Value array_value = 2;
}
