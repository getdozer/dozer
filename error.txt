warning: unused import: `opentelemetry::global`
 --> dozer-orchestrator/src/main.rs:6:5
  |
6 | use opentelemetry::global;
  |     ^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Key`, `TraceContextExt`, `Tracer`
  --> dozer-orchestrator/src/main.rs:12:13
   |
12 |     trace::{TraceContextExt, Tracer}, Key, KeyValue,
   |             ^^^^^^^^^^^^^^^  ^^^^^^   ^^^

warning: unused import: `std::error::Error`
  --> dozer-orchestrator/src/main.rs:14:5
   |
14 | use std::error::Error;
   |     ^^^^^^^^^^^^^^^^^

error[E0277]: `?` couldn't convert the error to `OrchestrationError`
  --> dozer-orchestrator/src/main.rs:40:32
   |
39 | fn main() -> Result<(), OrchestrationError> {
   |              ------------------------------ expected `OrchestrationError` because of this
40 |     let _tracer = init_tracer()?;
   |                                ^ the trait `From<TraceError>` is not implemented for `OrchestrationError`
   |
   = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
   = help: the following other types implement trait `From<T>`:
             <OrchestrationError as From<dozer_types::errors::connector::ConnectorError>>
             <OrchestrationError as From<dozer_types::errors::execution::ExecutionError>>
   = note: required because of the requirements on the impl of `FromResidual<Result<Infallible, TraceError>>` for `Result<(), OrchestrationError>`

error[E0308]: mismatched types
  --> dozer-orchestrator/src/main.rs:56:42
   |
54 | /     if let Some(cmd) = args.cmd {
55 | |         match cmd {
56 | |             SubCommand::GenerateToken => generate_token(),
   | |                                          ^^^^^^^^^^^^^^^^ expected `()`, found enum `Result`
57 | |         }
58 | |     } else {
59 | |         run(args.config_path)
60 | |     }
   | |_____- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Result<(), OrchestrationError>`
help: consider using a semicolon here
   |
57 |         };
   |          +
help: consider using a semicolon here
   |
60 |     };
   |      +
help: you might have meant to return this value
   |
55 ~         return match cmd {
56 |             SubCommand::GenerateToken => generate_token(),
57 ~         };
   |

error[E0308]: mismatched types
  --> dozer-orchestrator/src/main.rs:59:9
   |
54 | /     if let Some(cmd) = args.cmd {
55 | |         match cmd {
56 | |             SubCommand::GenerateToken => generate_token(),
57 | |         }
58 | |     } else {
59 | |         run(args.config_path)
   | |         ^^^^^^^^^^^^^^^^^^^^^ expected `()`, found enum `Result`
60 | |     }
   | |_____- expected this to be `()`
   |
   = note: expected unit type `()`
                   found enum `Result<(), OrchestrationError>`
help: consider using a semicolon here
   |
59 |         run(args.config_path);
   |                              +
help: consider using a semicolon here
   |
60 |     };
   |      +
help: you might have meant to return this value
   |
59 |         return run(args.config_path);
   |         ++++++                      +

error[E0308]: mismatched types
  --> dozer-orchestrator/src/main.rs:39:14
   |
39 | fn main() -> Result<(), OrchestrationError> {
   |    ----      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected enum `Result`, found `()`
   |    |
   |    implicitly returns `()` as its body has no tail or `return` expression
   |
   = note:   expected enum `Result<(), OrchestrationError>`
           found unit type `()`

Some errors have detailed explanations: E0277, E0308.
For more information about an error, try `rustc --explain E0277`.
warning: `dozer-orchestrator` (bin "dozer") generated 3 warnings
error: could not compile `dozer-orchestrator` due to 4 previous errors; 3 warnings emitted