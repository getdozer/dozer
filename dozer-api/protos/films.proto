/**
 * Sample proto file that is similar to the service that is automatically generated.
 *
 * This is for the endpoint `/films` with the fields `film_id`, `description`, `rental_rate` and `release_year`.
 *
 * The generated gRPC proto files will be at `${home_dir}/generated/{endpoint}.proto`.
 */
syntax = "proto3";

package dozer.generated.films;
import "types.proto";

// The generated service for `/films` endpoint.
service Films {
  /**
   * Counts the number of records satisfying the given query. See [Query](../query) for the query format.
   *
   * If no query is specified, total number of records or 50 will be returned, whichever is smaller.
   */
  rpc count(QueryFilmsRequest) returns (CountFilmsResponse);
  /**
   * Performs query. See [Query](../query) for the query format.
   *
   * If no query is specified, the first 50 records will be returned.
   */
  rpc query(QueryFilmsRequest) returns (QueryFilmsResponse);

  /**
   * Subscribes to the Dozer event stream, optionally applies a filter. See [Query](../query) for the filter format.
   *
   * This API is unstable and may change in the future.
   */
  rpc on_event(FilmEventRequest) returns (stream FilmEvent);

  // Gets the authentication token.
  rpc token(TokenRequest) returns (TokenResponse);
}

// Request for `count` and `query`.
message QueryFilmsRequest {
  // JSON query string.
  optional string query = 1;
}

// Response for `count`.
message CountFilmsResponse {
  // The number of records.
  uint64 count = 1;
}

// Response for `query`.
message QueryFilmsResponse {
  // The list of record data.
  repeated Film data = 1;
}

// Request for `on_event`.
message FilmEventRequest {
  // The event type to subscribe to.
  dozer.types.EventType type = 1;
  // JSON filter string.
  optional string filter = 2;
}

// Response for `on_event`.
message FilmEvent {
  // The operation type.
  dozer.types.OperationType typ = 1;
  // Old record data, only applicable for UPDATE type.
  optional Film old = 2;
  // New record data.
  optional Film new = 3;
}

/**
 * Generated record type based on Dozer pipeline's output schema.
 *
 * Nullable fields will be generated as `optional` fields.
 */
 message Film {
  uint64 film_id = 1;
  optional string description = 2;
  optional string rental_rate = 3;
  optional uint64 release_year = 4;
}

// Request for `token`.
message TokenRequest {
}

// Response for `token`.
message TokenResponse {
  // The token string.
  string token = 1;
}
