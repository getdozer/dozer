// Dozer Generated for {{package_name}}

syntax = "proto3";
package {{package_name}};


{{#each import_libs}}
import "{{this}}";
{{~/each}}

/**
 * TypedService provides explicit and strongly-typed data access experience for developers.
 *
 * This allows for a more user-friendly and predictable API. Developers can rely on the explicitly defined types to guide them and catch errors at compile-time.
 */
service {{plural_pascal_name}} {
  /**
   * Counts the number of records satisfying the given query. See [Query](../query) for the query format.
   *
   * If no query is specified, total number of records will be returned.
   */
  rpc count(Query{{plural_pascal_name}}Request) returns (Count{{plural_pascal_name}}Response);
  /**
   * Performs query. See [Query](../query) for the query format.
   *
   * If no query is specified, the first 50 records will be returned.
   */
  rpc query(Query{{plural_pascal_name}}Request) returns (Query{{plural_pascal_name}}Response);

  {{#if enable_on_event}}
  /**
   * Subscribes to the Dozer event stream, optionally applies a filter. See [Query](../query) for the filter format.
   *
   * This API is unstable and may change in the future.
   */
  rpc on_event({{pascal_name}}EventRequest) returns (stream {{pascal_name}}Event);
  {{/if}}
  {{#if enable_token}}
  // Gets the authentication token.
  rpc token(TokenRequest) returns (TokenResponse);
  {{/if}}
}

// Request for `count` and `query`.
message Query{{plural_pascal_name}}Request {
  // JSON query string.
  optional string query = 1;
}

// Response for `count`.
message Count{{plural_pascal_name}}Response {
  // The number of records.
  uint64 count = 1;
}

// Response for `query`.
message Query{{plural_pascal_name}}Response {
  // The list of record data.
  repeated {{pascal_name}} data = 1;
}

{{#if enable_on_event}}
// Request for `on_event`.
message {{pascal_name}}EventRequest {
  // The event type to subscribe to.
  dozer.types.EventType type = 1;
  // JSON filter string.
  optional string filter = 2;
}
// Response for `on_event`.
message {{pascal_name}}Event {
  // The operation type.
  dozer.types.OperationType typ = 1;
  // Old record data, only applicable for UPDATE type.
  optional {{pascal_name}} old = 2;
  // New record data.
  optional {{pascal_name}} new = 3;
}
{{/if}}
/**
 * {{pascal_name}} record type.
 * 
 * Nullable fields will be generated as `optional` fields.
 */
{{#each messages}}
message {{name}} {
 {{#each props}}
 {{{this}}}
 {{~/each}}
}
{{~/each}}

{{#if enable_token}}
// Request for `token`.
message TokenRequest {
}

// Response for `token`.
message TokenResponse {
  // The token string.
  string token = 1;
}
{{/if}}
