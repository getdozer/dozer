{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Config",
  "description": "The configuration for the app",
  "type": "object",
  "required": [
    "app_name",
    "version"
  ],
  "properties": {
    "api": {
      "description": "Api server config related: port, host, etc",
      "allOf": [
        {
          "$ref": "#/definitions/ApiConfig"
        }
      ]
    },
    "app": {
      "description": "App runtime config: behaviour of pipeline and log",
      "allOf": [
        {
          "$ref": "#/definitions/AppConfig"
        }
      ]
    },
    "app_name": {
      "description": "name of the app",
      "type": "string"
    },
    "company_id": {
      "description": "Unique application Id",
      "default": "",
      "type": "string"
    },
    "connections": {
      "description": "connections to databases: Eg: Postgres, Snowflake, etc",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Connection"
      }
    },
    "flags": {
      "description": "flags to enable/disable features",
      "allOf": [
        {
          "$ref": "#/definitions/Flags"
        }
      ]
    },
    "home_dir": {
      "description": "directory for all process; Default: ./.dozer",
      "type": [
        "string",
        "null"
      ]
    },
    "id": {
      "description": "Unique application Id",
      "default": "",
      "type": "string"
    },
    "lambdas": {
      "description": "Lambda functions.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/LambdaConfig"
      }
    },
    "sinks": {
      "description": "sinks to output data to",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Sink"
      }
    },
    "sources": {
      "description": "sources to ingest data related to particular connection",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Source"
      }
    },
    "sql": {
      "description": "transformations to apply to source data in SQL format as multiple queries",
      "type": [
        "string",
        "null"
      ]
    },
    "telemetry": {
      "description": "Instrument using Dozer",
      "allOf": [
        {
          "$ref": "#/definitions/TelemetryConfig"
        }
      ]
    },
    "udfs": {
      "description": "UDF specific configuration (eg. !Onnx)",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UdfConfig"
      }
    },
    "version": {
      "type": "integer",
      "format": "uint32",
      "minimum": 0.0
    }
  },
  "additionalProperties": false,
  "definitions": {
    "AerospikeConnection": {
      "type": "object",
      "required": [
        "hosts",
        "namespace",
        "sets"
      ],
      "properties": {
        "batching": {
          "default": false,
          "type": "boolean"
        },
        "hosts": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "replication": {
          "default": {
            "datacenter": "esp",
            "server_address": "0.0.0.0",
            "server_port": 5929
          },
          "allOf": [
            {
              "$ref": "#/definitions/ReplicationSettings"
            }
          ]
        },
        "schemas": {
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/ConfigSchemas"
            },
            {
              "type": "null"
            }
          ]
        },
        "sets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AerospikeDenormalizations": {
      "type": "object",
      "required": [
        "columns",
        "from_namespace",
        "from_set",
        "key"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DenormColumn"
          }
        },
        "from_namespace": {
          "type": "string"
        },
        "from_set": {
          "type": "string"
        },
        "key": {
          "$ref": "#/definitions/DenormKey"
        }
      },
      "additionalProperties": false
    },
    "AerospikeSet": {
      "type": "object",
      "required": [
        "namespace",
        "primary_key",
        "set"
      ],
      "properties": {
        "namespace": {
          "type": "string"
        },
        "primary_key": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "set": {
          "type": "string"
        }
      }
    },
    "AerospikeSinkConfig": {
      "type": "object",
      "required": [
        "connection",
        "metadata_namespace"
      ],
      "properties": {
        "connection": {
          "type": "string"
        },
        "max_batch_duration_ms": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "metadata_namespace": {
          "type": "string"
        },
        "metadata_set": {
          "default": null,
          "type": [
            "string",
            "null"
          ]
        },
        "n_threads": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 1.0
        },
        "preferred_batch_size": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "snapshot_batch_size": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AerospikeSinkTable"
          }
        }
      },
      "additionalProperties": false
    },
    "AerospikeSinkTable": {
      "type": "object",
      "required": [
        "namespace",
        "set_name",
        "source_table_name"
      ],
      "properties": {
        "aggregate_by_pk": {
          "default": false,
          "type": "boolean"
        },
        "denormalize": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AerospikeDenormalizations"
          }
        },
        "namespace": {
          "type": "string"
        },
        "primary_key": {
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "set_name": {
          "type": "string"
        },
        "source_table_name": {
          "type": "string"
        },
        "write_denormalized_to": {
          "anyOf": [
            {
              "$ref": "#/definitions/AerospikeSet"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "ApiConfig": {
      "type": "object",
      "properties": {
        "api_security": {
          "description": "The security configuration for the API; Default: None",
          "anyOf": [
            {
              "$ref": "#/definitions/ApiSecurity"
            },
            {
              "type": "null"
            }
          ]
        },
        "app_grpc": {
          "$ref": "#/definitions/AppGrpcOptions"
        },
        "default_max_num_records": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0.0
        },
        "grpc": {
          "$ref": "#/definitions/GrpcApiOptions"
        },
        "pgwire": {
          "$ref": "#/definitions/PgWireOptions"
        },
        "rest": {
          "$ref": "#/definitions/RestApiOptions"
        }
      },
      "additionalProperties": false
    },
    "ApiSecurity": {
      "description": "The security model option for the API",
      "oneOf": [
        {
          "description": "Initialize with a JWT_SECRET",
          "type": "object",
          "required": [
            "Jwt"
          ],
          "properties": {
            "Jwt": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AppConfig": {
      "type": "object",
      "properties": {
        "app_buffer_size": {
          "description": "Pipeline buffer size",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "error_threshold": {
          "description": "How many errors we can tolerate before bringing down the app.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "event_hub_capacity": {
          "description": "The event hub's queue capacity. Events that are not processed will be dropped.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "AppGrpcOptions": {
      "type": "object",
      "properties": {
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "ClickhouseSinkConfig": {
      "type": "object",
      "required": [
        "options",
        "sink_table_name",
        "source_table_name"
      ],
      "properties": {
        "create_table_options": {
          "anyOf": [
            {
              "$ref": "#/definitions/ClickhouseTableOptions"
            },
            {
              "type": "null"
            }
          ]
        },
        "database": {
          "default": "default",
          "type": "string"
        },
        "host": {
          "default": "0.0.0.0",
          "type": "string"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "string"
              },
              {
                "type": "string"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "password": {
          "default": null,
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "default": 9000,
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "scheme": {
          "default": "tcp",
          "type": "string"
        },
        "sink_table_name": {
          "type": "string"
        },
        "source_table_name": {
          "type": "string"
        },
        "user": {
          "default": "default",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ClickhouseTableOptions": {
      "type": "object",
      "properties": {
        "cluster": {
          "type": [
            "string",
            "null"
          ]
        },
        "engine": {
          "type": [
            "string",
            "null"
          ]
        },
        "order_by": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "partition_by": {
          "type": [
            "string",
            "null"
          ]
        },
        "primary_keys": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          }
        },
        "sample_by": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "ConfigSchemas": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Inline"
          ],
          "properties": {
            "Inline": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Path"
          ],
          "properties": {
            "Path": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Connection": {
      "type": "object",
      "required": [
        "config",
        "name"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/ConnectionConfig"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "ConnectionConfig": {
      "oneOf": [
        {
          "description": "In yaml, present as tag: `!Postgres`",
          "type": "object",
          "required": [
            "Postgres"
          ],
          "properties": {
            "Postgres": {
              "$ref": "#/definitions/PostgresConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!Ethereum`",
          "type": "object",
          "required": [
            "Ethereum"
          ],
          "properties": {
            "Ethereum": {
              "$ref": "#/definitions/EthConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!Grpc`",
          "type": "object",
          "required": [
            "Grpc"
          ],
          "properties": {
            "Grpc": {
              "$ref": "#/definitions/GrpcConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!Snowflake`",
          "type": "object",
          "required": [
            "Snowflake"
          ],
          "properties": {
            "Snowflake": {
              "$ref": "#/definitions/SnowflakeConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!Kafka`",
          "type": "object",
          "required": [
            "Kafka"
          ],
          "properties": {
            "Kafka": {
              "$ref": "#/definitions/KafkaConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!ObjectStore`",
          "type": "object",
          "required": [
            "S3Storage"
          ],
          "properties": {
            "S3Storage": {
              "$ref": "#/definitions/S3Storage"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!ObjectStore`",
          "type": "object",
          "required": [
            "LocalStorage"
          ],
          "properties": {
            "LocalStorage": {
              "$ref": "#/definitions/LocalStorage"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag\" `!DeltaLake`",
          "type": "object",
          "required": [
            "DeltaLake"
          ],
          "properties": {
            "DeltaLake": {
              "$ref": "#/definitions/DeltaLakeConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag: `!MongoDB`",
          "type": "object",
          "required": [
            "MongoDB"
          ],
          "properties": {
            "MongoDB": {
              "$ref": "#/definitions/MongodbConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag\" `!MySQL`",
          "type": "object",
          "required": [
            "MySQL"
          ],
          "properties": {
            "MySQL": {
              "$ref": "#/definitions/MySQLConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag\" `!JavaScript`",
          "type": "object",
          "required": [
            "JavaScript"
          ],
          "properties": {
            "JavaScript": {
              "$ref": "#/definitions/JavaScriptConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "In yaml, present as tag\" `!Webhook`",
          "type": "object",
          "required": [
            "Webhook"
          ],
          "properties": {
            "Webhook": {
              "$ref": "#/definitions/WebhookConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Oracle"
          ],
          "properties": {
            "Oracle": {
              "$ref": "#/definitions/OracleConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Aerospike"
          ],
          "properties": {
            "Aerospike": {
              "$ref": "#/definitions/AerospikeConnection"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CsvConfig": {
      "type": "object",
      "required": [
        "extension",
        "path"
      ],
      "properties": {
        "extension": {
          "type": "string"
        },
        "marker_extension": {
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "type": "string"
        }
      }
    },
    "DeltaLakeConfig": {
      "examples": [
        {
          "tables": [
            {
              "name": "",
              "path": ""
            }
          ]
        }
      ],
      "type": "object",
      "required": [
        "tables"
      ],
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DeltaTable"
          }
        }
      }
    },
    "DeltaTable": {
      "type": "object",
      "required": [
        "name",
        "path"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        }
      }
    },
    "DenormColumn": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "object",
          "required": [
            "destination",
            "source"
          ],
          "properties": {
            "destination": {
              "type": "string"
            },
            "source": {
              "type": "string"
            }
          }
        }
      ]
    },
    "DenormKey": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      ]
    },
    "DummySinkConfig": {
      "type": "object",
      "required": [
        "table_name"
      ],
      "properties": {
        "table_name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "EnableProbabilisticOptimizations": {
      "type": "object",
      "properties": {
        "in_aggregations": {
          "description": "enable probabilistic optimizations in aggregations (SUM, COUNT, MIN, etc.); Default: false",
          "type": [
            "boolean",
            "null"
          ]
        },
        "in_joins": {
          "description": "enable probabilistic optimizations in JOIN operations; Default: false",
          "type": [
            "boolean",
            "null"
          ]
        },
        "in_sets": {
          "description": "enable probabilistic optimizations in set operations (UNION, EXCEPT, INTERSECT); Default: false",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "EthConfig": {
      "examples": [
        {
          "provider": {
            "Log": {
              "filter": {
                "from_block": 0,
                "to_block": null
              },
              "wss_url": ""
            }
          }
        }
      ],
      "type": "object",
      "required": [
        "provider"
      ],
      "properties": {
        "provider": {
          "$ref": "#/definitions/EthProviderConfig"
        }
      }
    },
    "EthContract": {
      "type": "object",
      "required": [
        "abi",
        "address",
        "name"
      ],
      "properties": {
        "abi": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "EthFilter": {
      "type": "object",
      "properties": {
        "addresses": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "from_block": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "to_block": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "topics": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EthLogConfig": {
      "type": "object",
      "required": [
        "wss_url"
      ],
      "properties": {
        "contracts": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EthContract"
          }
        },
        "filter": {
          "anyOf": [
            {
              "$ref": "#/definitions/EthFilter"
            },
            {
              "type": "null"
            }
          ]
        },
        "wss_url": {
          "type": "string"
        }
      }
    },
    "EthProviderConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Log"
          ],
          "properties": {
            "Log": {
              "$ref": "#/definitions/EthLogConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Trace"
          ],
          "properties": {
            "Trace": {
              "$ref": "#/definitions/EthTraceConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "EthTraceConfig": {
      "type": "object",
      "required": [
        "from_block",
        "https_url"
      ],
      "properties": {
        "batch_size": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "from_block": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "https_url": {
          "type": "string"
        },
        "to_block": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Flags": {
      "type": "object",
      "properties": {
        "authenticate_server_reflection": {
          "description": "require authentication to access grpc server reflection service if true.; Default: false",
          "type": [
            "boolean",
            "null"
          ]
        },
        "dynamic": {
          "description": "dynamic grpc enabled; Default: true",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_app_checkpoints": {
          "description": "app checkpoints can be used to resume execution of a query.; Default: false",
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_probabilistic_optimizations": {
          "description": "probablistic optimizations reduce memory consumption at the expense of accuracy.",
          "allOf": [
            {
              "$ref": "#/definitions/EnableProbabilisticOptimizations"
            }
          ]
        },
        "grpc_web": {
          "description": "http1 + web support for grpc. This is required for browser clients.; Default: true",
          "type": [
            "boolean",
            "null"
          ]
        },
        "push_events": {
          "description": "push events enabled.; Default: true",
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "GrpcApiOptions": {
      "type": "object",
      "properties": {
        "cors": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "enabled": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        },
        "web": {
          "type": [
            "boolean",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "GrpcConfig": {
      "examples": [
        {
          "adapter": "arrow",
          "host": "localhost",
          "port": 50051,
          "schemas": {
            "Path": "schema.json"
          }
        }
      ],
      "type": "object",
      "required": [
        "schemas"
      ],
      "properties": {
        "adapter": {
          "type": [
            "string",
            "null"
          ]
        },
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "schemas": {
          "$ref": "#/definitions/ConfigSchemas"
        }
      }
    },
    "JavaScriptConfig": {
      "type": "object",
      "properties": {
        "bootstrap_path": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "JavaScriptConfig2": {
      "type": "object",
      "required": [
        "module"
      ],
      "properties": {
        "module": {
          "description": "path to the module file",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "JavaScriptLambda": {
      "type": "object",
      "required": [
        "endpoint",
        "module"
      ],
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "module": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "KafkaConfig": {
      "examples": [
        {
          "broker": "",
          "schema_registry_url": ""
        }
      ],
      "type": "object",
      "required": [
        "broker"
      ],
      "properties": {
        "broker": {
          "type": "string"
        },
        "schema_registry_url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "LambdaConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "JavaScript"
          ],
          "properties": {
            "JavaScript": {
              "$ref": "#/definitions/JavaScriptLambda"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "LocalDetails": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string"
        }
      }
    },
    "LocalStorage": {
      "examples": [
        {
          "details": {
            "path": "path"
          },
          "tables": [
            {
              "config": {
                "CSV": {
                  "extension": ".csv",
                  "path": "path/to/table"
                }
              },
              "name": "table_name"
            }
          ]
        }
      ],
      "type": "object",
      "required": [
        "details",
        "tables"
      ],
      "properties": {
        "details": {
          "$ref": "#/definitions/LocalDetails"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table"
          }
        }
      }
    },
    "MongodbConfig": {
      "examples": [
        {
          "connection_string": "mongodb://localhost:27017/db_name"
        }
      ],
      "type": "object",
      "required": [
        "connection_string"
      ],
      "properties": {
        "connection_string": {
          "type": "string"
        }
      }
    },
    "MySQLConfig": {
      "examples": [
        {
          "server_id": 1,
          "url": "mysql://root:1234@localhost:3306/db_name"
        }
      ],
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "server_id": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "url": {
          "type": "string"
        }
      }
    },
    "OnnxConfig": {
      "type": "object",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "description": "path to the model file",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "OracleConfig": {
      "type": "object",
      "required": [
        "host",
        "password",
        "port",
        "replicator",
        "sid",
        "user"
      ],
      "properties": {
        "batch_size": {
          "description": "Batch size during snapshotting",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint",
          "minimum": 0.0
        },
        "host": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "pdb": {
          "description": "Only needed if using pluggable database",
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "replicator": {
          "$ref": "#/definitions/OracleReplicator"
        },
        "schemas": {
          "description": "The schemas to consider when listing tables. If empty, will list all schemas, which can be slow.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sid": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "OracleReplicator": {
      "oneOf": [
        {
          "type": "string",
          "enum": [
            "DozerLogReader"
          ]
        },
        {
          "type": "object",
          "required": [
            "LogMiner"
          ],
          "properties": {
            "LogMiner": {
              "type": "object",
              "required": [
                "poll_interval_in_milliseconds"
              ],
              "properties": {
                "fetch_batch_size": {
                  "type": [
                    "integer",
                    "null"
                  ],
                  "format": "uint32",
                  "minimum": 0.0
                },
                "poll_interval_in_milliseconds": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OracleSinkConfig": {
      "type": "object",
      "required": [
        "connection",
        "table_name"
      ],
      "properties": {
        "connection": {
          "type": "string"
        },
        "owner": {
          "default": null,
          "type": [
            "string",
            "null"
          ]
        },
        "table_name": {
          "type": "string"
        },
        "unique_key": {
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "additionalProperties": false
    },
    "ParquetConfig": {
      "type": "object",
      "required": [
        "extension",
        "path"
      ],
      "properties": {
        "extension": {
          "type": "string"
        },
        "marker_extension": {
          "type": [
            "string",
            "null"
          ]
        },
        "path": {
          "type": "string"
        }
      }
    },
    "PgWireOptions": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "PostgresConfig": {
      "description": "Configuration for a Postgres connection",
      "examples": [
        {
          "database": "postgres",
          "host": "localhost",
          "password": "postgres",
          "port": 5432,
          "schema": "public",
          "user": "postgres"
        }
      ],
      "type": "object",
      "properties": {
        "batch_size": {
          "description": "The snapshot batch size",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "connection_url": {
          "description": "The connection url to use",
          "type": [
            "string",
            "null"
          ]
        },
        "database": {
          "description": "The database to connect to (default: postgres)",
          "type": [
            "string",
            "null"
          ]
        },
        "host": {
          "description": "The host to connect to (IP or DNS name)",
          "type": [
            "string",
            "null"
          ]
        },
        "password": {
          "description": "The password to use for authentication",
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "description": "The port to connect to (default: 5432)",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "schema": {
          "description": "The schema of the tables",
          "type": [
            "string",
            "null"
          ]
        },
        "sslmode": {
          "description": "The sslmode to use for the connection (disable, prefer, require)",
          "type": [
            "string",
            "null"
          ]
        },
        "user": {
          "description": "The username to use for authentication",
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "PrometheusConfig": {
      "type": "object",
      "properties": {
        "address": {
          "default": "0.0.0.0:8089",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RefreshConfig": {
      "type": "string",
      "enum": [
        "RealTime"
      ]
    },
    "ReplicationMode": {
      "type": "string",
      "enum": [
        "SnapshotOnly",
        "ReplicationOnly",
        "Full"
      ]
    },
    "ReplicationSettings": {
      "type": "object",
      "properties": {
        "datacenter": {
          "default": "esp",
          "type": "string"
        },
        "server_address": {
          "default": "0.0.0.0",
          "type": "string"
        },
        "server_port": {
          "default": 5929,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "RestApiOptions": {
      "type": "object",
      "properties": {
        "cors": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "enable_sql": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "enabled": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint16",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "S3Details": {
      "type": "object",
      "required": [
        "access_key_id",
        "bucket_name",
        "region",
        "secret_access_key"
      ],
      "properties": {
        "access_key_id": {
          "type": "string"
        },
        "bucket_name": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "secret_access_key": {
          "type": "string"
        }
      }
    },
    "S3Storage": {
      "examples": [
        {
          "details": {
            "access_key_id": "",
            "bucket_name": "",
            "region": "",
            "secret_access_key": ""
          },
          "tables": [
            {
              "config": {
                "CSV": {
                  "extension": ".csv",
                  "path": "path/to/file"
                }
              },
              "name": "table_name"
            }
          ]
        }
      ],
      "type": "object",
      "required": [
        "details",
        "tables"
      ],
      "properties": {
        "details": {
          "$ref": "#/definitions/S3Details"
        },
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Table"
          }
        }
      }
    },
    "Sink": {
      "type": "object",
      "required": [
        "config",
        "name"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/SinkConfig"
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SinkConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Dummy"
          ],
          "properties": {
            "Dummy": {
              "$ref": "#/definitions/DummySinkConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Aerospike"
          ],
          "properties": {
            "Aerospike": {
              "$ref": "#/definitions/AerospikeSinkConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Clickhouse"
          ],
          "properties": {
            "Clickhouse": {
              "$ref": "#/definitions/ClickhouseSinkConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Oracle"
          ],
          "properties": {
            "Oracle": {
              "$ref": "#/definitions/OracleSinkConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SnowflakeConfig": {
      "examples": [
        {
          "database": "database",
          "driver": "SnowflakeDSIIDriver",
          "password": "password",
          "port": "443",
          "role": "role",
          "schema": "schema",
          "server": "<account_name>.<region_id>.snowflakecomputing.com",
          "user": "bob",
          "warehouse": "warehouse"
        }
      ],
      "type": "object",
      "required": [
        "database",
        "password",
        "port",
        "role",
        "schema",
        "server",
        "user",
        "warehouse"
      ],
      "properties": {
        "database": {
          "type": "string"
        },
        "driver": {
          "type": [
            "string",
            "null"
          ]
        },
        "password": {
          "type": "string"
        },
        "poll_interval_seconds": {
          "type": "number",
          "format": "double"
        },
        "port": {
          "type": "string"
        },
        "role": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "server": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "warehouse": {
          "type": "string"
        }
      }
    },
    "Source": {
      "type": "object",
      "required": [
        "connection",
        "name",
        "table_name"
      ],
      "properties": {
        "columns": {
          "description": "list of columns gonna be used in the source table; Type: String[]",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "connection": {
          "description": "reference to pre-defined connection name; Type: String",
          "type": "string"
        },
        "name": {
          "description": "name of the source - to distinguish between multiple sources; Type: String",
          "type": "string"
        },
        "refresh_config": {
          "description": "setting for how to refresh the data; Default: RealTime",
          "allOf": [
            {
              "$ref": "#/definitions/RefreshConfig"
            }
          ]
        },
        "replication_mode": {
          "default": "Full",
          "allOf": [
            {
              "$ref": "#/definitions/ReplicationMode"
            }
          ]
        },
        "schema": {
          "description": "name of schema source database; Type: String",
          "type": [
            "string",
            "null"
          ]
        },
        "table_name": {
          "description": "name of the table in source database; Type: String",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Table": {
      "type": "object",
      "required": [
        "config",
        "name"
      ],
      "properties": {
        "config": {
          "$ref": "#/definitions/TableConfig"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "TableConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "CSV"
          ],
          "properties": {
            "CSV": {
              "$ref": "#/definitions/CsvConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Parquet"
          ],
          "properties": {
            "Parquet": {
              "$ref": "#/definitions/ParquetConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TelemetryConfig": {
      "type": "object",
      "properties": {
        "application_id": {
          "default": 0,
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "metrics": {
          "anyOf": [
            {
              "$ref": "#/definitions/TelemetryMetricsConfig"
            },
            {
              "type": "null"
            }
          ]
        },
        "trace": {
          "anyOf": [
            {
              "$ref": "#/definitions/TelemetryTraceConfig"
            },
            {
              "type": "null"
            }
          ]
        }
      },
      "additionalProperties": false
    },
    "TelemetryMetricsConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Prometheus"
          ],
          "properties": {
            "Prometheus": {
              "$ref": "#/definitions/PrometheusConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TelemetryTraceConfig": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "XRay"
          ],
          "properties": {
            "XRay": {
              "$ref": "#/definitions/XRayConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "UdfConfig": {
      "type": "object",
      "required": [
        "config",
        "name"
      ],
      "properties": {
        "config": {
          "description": "setting for what type of udf to use; Default: Onnx",
          "allOf": [
            {
              "$ref": "#/definitions/UdfType"
            }
          ]
        },
        "name": {
          "description": "name of the model function",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "UdfType": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Onnx"
          ],
          "properties": {
            "Onnx": {
              "$ref": "#/definitions/OnnxConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "JavaScript"
          ],
          "properties": {
            "JavaScript": {
              "$ref": "#/definitions/JavaScriptConfig2"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WebhookConfig": {
      "examples": [
        {
          "endpoints": [
            {
              "path": "/ingest",
              "schema": {
                "Inline": "\n        {\n            \"users\": {\n              \"schema\": {\n                \"fields\": [\n                  {\n                    \"name\": \"id\",\n                    \"typ\": \"Int\",\n                    \"nullable\": false\n                  },\n                  {\n                    \"name\": \"name\",\n                    \"typ\": \"String\",\n                    \"nullable\": true\n                  },\n                  {\n                    \"name\": \"json\",\n                    \"typ\": \"Json\",\n                    \"nullable\": true\n                  }\n                ]\n              }\n            }\n          }\n        "
              },
              "verbs": [
                "POST",
                "DELETE"
              ]
            }
          ],
          "host": "localhost",
          "port": 50059
        }
      ],
      "type": "object",
      "required": [
        "endpoints"
      ],
      "properties": {
        "endpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookEndpoint"
          }
        },
        "host": {
          "type": [
            "string",
            "null"
          ]
        },
        "port": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "WebhookConfigSchemas": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "Inline"
          ],
          "properties": {
            "Inline": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "Path"
          ],
          "properties": {
            "Path": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "WebhookEndpoint": {
      "examples": [
        {
          "path": "/ingest",
          "schema": {
            "Inline": "\n        {\n            \"users\": {\n              \"schema\": {\n                \"fields\": [\n                  {\n                    \"name\": \"id\",\n                    \"typ\": \"Int\",\n                    \"nullable\": false\n                  },\n                  {\n                    \"name\": \"name\",\n                    \"typ\": \"String\",\n                    \"nullable\": true\n                  },\n                  {\n                    \"name\": \"json\",\n                    \"typ\": \"Json\",\n                    \"nullable\": true\n                  }\n                ]\n              }\n            }\n          }\n        "
          },
          "verbs": [
            "POST",
            "DELETE"
          ]
        }
      ],
      "type": "object",
      "required": [
        "path",
        "schema",
        "verbs"
      ],
      "properties": {
        "path": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/WebhookConfigSchemas"
        },
        "verbs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/WebhookVerb"
          }
        }
      }
    },
    "WebhookVerb": {
      "examples": [
        "POST"
      ],
      "type": "string",
      "enum": [
        "POST",
        "PUT",
        "DELETE"
      ]
    },
    "XRayConfig": {
      "type": "object",
      "required": [
        "endpoint",
        "timeout_in_seconds"
      ],
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "timeout_in_seconds": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    }
  }
}